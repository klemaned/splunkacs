#!/usr/bin/python3

# References: https://docs.splunk.com/Documentation/SplunkCloud/9.0.2209/Config/

import requests
import json
import sys
import re
import configparser
import os
import datetime

CONFIG_FILE='./settings.config'

def command_inbound_acl(action=None,feature=None,network=None,extra=None):
    # Reference: https://docs.splunk.com/Documentation/SplunkCloud/9.0.2209/Config/ConfigureIPAllowList
    
    ACL_FEATURE_LIST=['idm-api','idm-ui','hec','s2s','search-api','search-ui'] # Available ACL Features included in Splunk ACS API
    
    if feature in ACL_FEATURE_LIST: # check if feature input is valid
        api_endpoint = splunk_url_base+"/adminconfig/v2/access/"+feature+"/ipallowlists"
        if action == "show":
            splunk_get(api_endpoint)
        elif action == "add" or action == "remove":
            if check_network(network): # Is network valid cidr notation
                network_list=[] # Convert Network to List is required for Splunk API
                network_list.append(network)
                post_data={'subnets': network_list} # Prepare data as dictionary for Splunk API
                if action == "add":
                    splunk_post(api_endpoint,post_data)
                elif action == "remove":
                    splunk_delete(api_endpoint,post_data)
            else:
                print_help("inbound-acl","Improperly Formatted CIDR Network. Example: 8.8.8.8/32")
        else:
            print_help('inbound-acl')
    else:
        print_help('inbound-acl')

def command_outbound_acl(action=None,port=None,network=None,extra=None):
    if action == 'show':
        if port:
            api_endpoint = splunk_url_base+"/adminconfig/v2/access/outbound-ports/"+port
        else:
            api_endpoint = splunk_url_base+"/adminconfig/v2/access/outbound-ports"
        splunk_get(api_endpoint)
    elif action == 'add' or action == 'remove':
        if port == None or network == None:
            print_help('outbound-acl','Add and Remove require port and network arguments')
            return
        else:
            if check_network(network):
                network_list = []
                network_list.append(network)
            else:
                print_help("outbound-acl","Improperly Formatted CIDR Network. Example: 8.8.8.8/32")
                return
            if action == 'add':
                api_endpoint = splunk_url_base+"/adminconfig/v2/access/outbound-ports"
                outbound_ports = []
                outbound_ports.append({'subnets':network_list,'port':int(port)})
                post_data = {'outboundPorts':outbound_ports}
                splunk_post(api_endpoint,post_data)
            elif action == 'remove':
                api_endpoint = splunk_url_base+"/adminconfig/v2/access/outbound-ports/"+port
                post_data = {'subnets':network_list}
                splunk_delete(api_endpoint,post_data)
            else:
                print_help('outbound-acl')
        
    else:
        print_help('outbound-acl')

def command_tokens(subcommand=None,action=None,extra1=None,extra2=None):
    api_endpoint = splunk_url_base+"/adminconfig/v2/tokens"
    if subcommand == "show":
        splunk_get(api_endpoint)
    elif subcommand == "add" or subcommand == "remove":
        print("Add and Remove are not currently supported. Manage Authentication tokens within the Splunk Cloud web interface.")
    else:
        print_help('tokens')

def command_settings(extra1=None,extra2=None,extra3=None,extra4=None):
    print("Current Settings:\n")
    print("Splunk Stack : " + splunk_stack)
    print("Bearer Token : " + splunk_token)
    print()

def command_configure(extra1=None,extra2=None,extra3=None,extra4=None):
    config = configparser.ConfigParser()
    print("\nPlease provide the following items to begin using splunkacs:\n")
    config['splunkacs'] = {}
    config['splunkacs']['stack'] = input("Splunk Stack Name (https://[stack].splunkcloud.com): ")
    config['splunkacs']['token'] = input("Splunk Authentication Token: ")
    print("\nValidating connection...\n")
    
    # Validate configuration by sending GET to tokens endpoint
    r=requests.get('https://admin.splunk.com/'+config['splunkacs']['stack']+'/adminconfig/v2/tokens', headers={'Authorization': 'Bearer '+config['splunkacs']['token']})
    if r.status_code == 200:
        print("Connection Successful")
        
        if os.path.exists(CONFIG_FILE): # If a config file already exists rename .old
            os.rename(CONFIG_FILE,CONFIG_FILE+".old")
        
        with open(CONFIG_FILE, 'w') as config_file: # Write new configuration
            config.write(config_file)

        print("Configuration Saved\n")
    else:
        print("Failed to verify connection. Configuration NOT saved")

def command_limits(subcommand=None,stanza=None,setting=None,value=None):
    # Reference: https://docs.splunk.com/Documentation/SplunkCloud/9.0.2209/Config/ManageLimits

    LIMITS_SETTINGS = { # Available Stanzas and Settings through the Splunk ACS limits API
        'join':['subsearch_maxout','subsearch_maxtime'],'kv':['maxchars','limit','maxcols'],'pdf':['max_rows_per_table'],'scheduler':['max_per_result_alerts','max_per_result_alerts_time'],
        'searchresults':['maxresultrows'],'spath':['extraction_cutoff'],'subsearch':['maxout','maxtime']
        }
    
    if stanza in LIMITS_SETTINGS.keys():
        api_endpoint = splunk_url_base+"/adminconfig/v2/limits/"+stanza # If a stanza is provided, scope the api request to that endpoint
    else:
        api_endpoint = splunk_url_base+"/adminconfig/v2/limits" # If no stanza is provided, the scope is all stanzas
 
    if subcommand == "show": # List current settings
        splunk_get(api_endpoint)

    elif subcommand == "defaults": # List default settings and value requirements
        splunk_get(api_endpoint+"/defaults")

    elif subcommand == "set": # To configure a settings requires the appropriate Stanza, the setting name, and the value to be configured. Value validation is handled on Splunk's api
        if stanza in LIMITS_SETTINGS.keys(): # validate stanza
            if setting in LIMITS_SETTINGS[stanza]: # validate setting
                post_data = {'settings':{setting:int(value)}} # construct data to send
                splunk_post(api_endpoint,post_data)
            else:
                print("Setting Does NOT Match")
        else:
            print_help('limits',"Unknown Stanza \'"+stanza+"\'")
    else:
        print_help('limits')

def command_maintenance(subcommand=None,from_time=None,to_time=None,extra1=None):
    RE_DATE_PATTERN = re.compile("\d{4}-\d{2}-\d{2}") # Match pattern YYYY-MM-DD. Date validation happens at api

    if subcommand == "show":
        if from_time == None:
            api_endpoint = splunk_url_base+"/adminconfig/v2/maintenance-windows/schedules" # Not providing a fromTime and toTime should result in a window of +-30days
        else:
            if RE_DATE_PATTERN.match(from_time): # is from_time in proper YYYY-MM-DD format
                if to_time == None:
                    to_time = str(datetime.date.today()) # set to_time to today if not specified
                else:
                    if not RE_DATE_PATTERN.match(to_time): # if provided to_time isn't in proper format, print error and help
                        print_help("maintenance",to_time+" does not mach Date Pattern YYYY-DD-MM")
                        return
                api_endpoint = splunk_url_base+"/adminconfig/v2/maintenance-windows/schedules?fromTime="+from_time+"&toTime="+to_time
            else:
                print_help("maintenance",from_time+" does not mach Date Pattern YYYY-DD-MM")
                return
        splunk_get(api_endpoint)
        
    else:
        print_help("maintenance")
            
def get_config():
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    splunk_stack = config['splunkacs']['stack']
    splunk_token = config['splunkacs']['token']
    splunk_url_base = "https://admin.splunk.com/"+splunk_stack
    headers = {
        'Authorization': 'Bearer '+splunk_token,
        'Content-Type': 'application/json'
    }


    return splunk_stack, splunk_token, splunk_url_base, headers

def print_help(command=None, message=None):
    if not message == None:
        print("Error: "+message+"\n")
    
    if command == None:
        print("A Command for managing the Splunk Cloud Admin Config Service (ACS)\n")
        print("Format:")
        print("splunkacs [command] <help>\n\nCommands:")
        for c in sorted(ACS_COMMANDS):
            tab_max = 3                         # Set tabs to format the output. A max_tab=3 should be able to hand up to 24 character values
            tab_set = tab_max-(int(len(c)/8))   # Tabs are applied at 8 characters
            tab_str = "\t"*tab_set              # For example print("1234567\tZ") results in "1234567 Z" and print("12345678\tZ") results in "12345678        Z"
            print(c+tab_str+ACS_COMMANDS[c]["description"]+" ")
    else:
        print("Command: "+command)
        print("Description: "+ACS_COMMANDS[command]["description"]+"\n")
        print("Format:")
        print(ACS_COMMANDS[command]["help"])
    print()

def print_json(json_text):
    json_object = json.loads(json_text)
    json_formatted = json.dumps(json_object, indent=2)
    print(json_formatted)

def splunk_get(u=None,d=None):
    r = requests.get(u, headers=headers)
    print_json(r.text)

def splunk_post(u=None,d=None):

    json_data=json.dumps(d)
    r = requests.post(u, data=json_data, headers=headers)
    if r.status_code in [200,202]:
        print("(Status Code: "+str(r.status_code)+" Execution Successful)")
    else:
        print("(Status Code: "+str(r.status_code)+" Execution Failed)")
    print()
    print_json(r.text)

def splunk_delete(u=None,d=None):
    json_data=json.dumps(d)
    r = requests.delete(u, data=json_data, headers=headers)
    if r.status_code in [200,202]:
        print("(Status Code: "+str(r.status_code)+" Execution Successful)")
    else:
        print("(Status Code: "+str(r.status_code)+" Execution Failed)")
    print()
    print_json(r.text)

def check_network(network):
    RE_NETWORK_PATTERN=re.compile("(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})")
    if RE_NETWORK_PATTERN.fullmatch(network):
        re_network_match=RE_NETWORK_PATTERN.fullmatch(network)
        i = 1
        while i <= 4:
            if int(re_network_match[i]) > 255:
                return None
            i += 1
        if int(re_network_match[5]) > 32:
            return None
        else:
            return "match"
        
    else:
        return None

ACS_COMMANDS = { # ACS_COMMANDS must be defined after functions so that the function names can be included in the dictionary to allow for dynamic execution according to user input
    'inbound-acl' : {
        'description' : 'Manage Splunk Cloud IP inbound access-lists',
        'help'        : 'splunkacs inbound-acl {show|add|remove} <feature> [cidr network]\n\nSplunk ACL Features:\nidm-api, idm-ui, hec, s2s, search-api, search-ui',
        'function'    : command_inbound_acl,

    },
    'outbound-acl' : {
        'description' : 'Manage Splunk Cloud IP outbound access-lists',
        'help'        : 'splunkacs outbound-acl {show|add|remove} [port] [cidr network]',
        'function'    : command_outbound_acl,

    },
    'tokens' : {
        'description' : 'View active Splunk Cloud Authentication Tokens',
        'help'        : 'splunkacs tokens {show}',
        'function'    : command_tokens,
    },
    'settings' : {
        'description' : 'Print current api settings',
        'help'        : 'splunkacs settings',
        'function'    : command_settings,
    },
    'configure' : {
        'description' : 'Delete current configuraiton and configure new',
        'help'        : 'splunkacs configure',
        'function'    : command_configure,
    },
    'limits' :{
        'description' : 'Manage the limtis.conf settings of Splunk Cloud',
        'help'        : 'splunkacs limits {defaults|set|show} [stanza] [setting] [value]\n\ndefaults\tDisplays default limits.conf settings\nset\t\tModify the Splunk Cloud limits. Requires a Stanza, Setting, and Value\nshow\t\tDisplays the current limits.conf settings\n\nFor information on Stanzas and Settings run \'splunkacs limits defaults\' or go to https://docs.splunk.com/Documentation/SplunkCloud/9.0.2209/Config/ManageLimits',
        'function'    : command_limits,
    },
    'maintenance' :{
        'description' : 'View previous and upcoming maintance windows',
        'help'        : 'splunkacs maintenance {show} [From Date] [To Date]\n\nDate Format: YYYY-MM-DD',
        'function'    : command_maintenance,
    },
}



def main():
    # Set all possible argument positions to None and fill from user input
    # This is helpful for a variable number arguments and passing arguments to functions of varying argument requirements. However, I'm sure theres a better way of doing this. 
    args={'arg1':None,'arg2':None,'arg3':None,'arg4':None,'arg5':None}
    i=1
    for a in args: 
        try:
            args[a]=sys.argv[i]
        except:
            args[a]=None
        i+=1

    # Validate Command Option
    if not os.path.exists(CONFIG_FILE): # Use CONFIG_FILE to determine if this is the first time running splunkacs
        print("This appears to be your first time running splunkacs.")
        command_configure()
    elif args['arg1'] in ACS_COMMANDS.keys(): # The first argument is considered the COMMAND argument and determines which function to execute. If the first argument is not a know command then there is nothing to run.
        global splunk_stack, splunk_token, splunk_url_base, headers
        splunk_stack, splunk_token, splunk_url_base, headers = get_config() # Get api configuration from config file
        if args['arg2'] == 'help': # If second argument is 'help' print the Help for the commmand specified in the first argument
            print_help(args['arg1'])
        else:
            # Execute command based on first argument and pass remaining arguments
            ACS_COMMANDS[args['arg1']]['function'](args['arg2'],args['arg3'],args['arg4'],args['arg5'])
    else:
        print_help()

if __name__ == '__main__':
    main()

